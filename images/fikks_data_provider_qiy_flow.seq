title fiKks Data Provider Qiy Flow

participant "Data Provider Qiy Node" as q
participant "Data Provider Back End" as b
participant "Data Provider Website"  as w
participant "Individual"             as i
participant "fiKks"                  as f

note over b, f
    Setup for Data Provider
end note
    note over b, w
        a. Register with Access Provider and obtain Qiy Node
        b. Setup Service Endpoint and register fqn with Access Provider
        c. Setup Operation Reference Request Forward Endpoint and registers fqn Access Provider
    end note
    note over b, q: d. 8.1.2 d1 Define Service Catalogue and Operation Reference Request Forward Endpoint
        b ->  q: PUT /serviceCatalogueEndpoint
    note over b, q: e. 5 Start listening to events
    b ->  q: GET /eventsEndpoint

note over b, f
    Operate
end note

note over i, f:  1. New Individual registers in fiKks
note over i, f:  2. Individual selects buddy
note over i, f:  3. Individual fills in income
note over i, f:  4. Individual fills in costs
note over i, f:  5. Individual starts filling in Data Providers
note over i, f:  6. Individual selects Data Provider which is a Qiy partner (for actual due payments)
note over w, f:  7. Individual is redirected to the Data Provider login (web)page
    f ->  w: Pass connect token of data provider and return url in redirection
note over i, w:  8. Individual logs in
note over i, w:  9. Individual sees payments information in Data Provider webpage
alt 10. Individual selects option to take over Data Provider payments information (in fiKks)
    b ->  b: Persist target member of connect token
    b ->  b: Wait for CONNECTED_TO_ROUTER event where event.extraData matches target
    note over w, f: 10.a Redirect user back to fiKks app using return url and 'ok' in status query parameter
    note over q, f: 10.b fiKks ap uses connect token to connect Qiy Nodes of Individual and Data Provider
        f -> q: Connect
        q --> b: 6.3.1 CONNECTED_TO_ROUTER event
        b ->  b: Persist the connection url of the event
        b ->  b: Wait for SHARED_SECRET_RECEIVED event with matching connection url
        b ->  b: Wait for STATE_HANDLED event with matching connection url
        alt Qiy Nodes are not connected
            q --> b: 6.3.1 SHARED_SECRET_RECEIVED event
            q --> b: 6.3.1 STATE_HANDLED event
            note over b: Qiy Nodes are connected for the first time
        else Qiy Nodes are already connected
            q --> b: 6.3.1 STATE_HANDLED event
            note over b
                1.b Stop waiting for SHARED_SECRET_RECEIVED event
                1.c Use connection as provided in extraData
            end note
        end
    note over q, f: 10.c fiKks backend retrieves operation reference for due payments
        f ->  i: fiKks backend sends an Operation Reference Request to Individual
        i ->  q: Individual forwards Operation Reference Request to Qiy Node of DP
        q ->  b: Qiy Node forwards Operation Reference Request to Forward Endpoint
        b ->  q: Data Provider registers Operation Specification
        q --> b: Operation Reference
        b ->  q: Data Provider sends an Operation Reference Message to Individual
        q ->  i: Qiy Node of the Data Provider delivers the Operation Reference to Individual
        i ->  f: Individual forwards Operation Reference to fiKks
    note over f, b: 10.d fiKks backend retrieves due payments
        f ->  b: 8.1.10 d9 fiKks sends an Operate Request
        b --> f: 8.1.11 d10 Response: due payments
    note over i, f: 11. Individual comes back in the fiKks ‘standard’ app and sees due payments loaded into fiKks
        f ->  b: d9
        b --> f: d10
    note over i, f: 12. Information is up-to-date each time the Individual accesses the app
        f ->  b: d9
        b --> f: d10
else 10. Individual selects option NOT to take over Data Provider payments information (in fiKks)
    note over w, f: 10.a Redirect user back to fiKks app using return url and 'ko' in status query parameter
end


